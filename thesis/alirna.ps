%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.0
%%CreationDate: Mon Oct 21 17:31:03 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUUUU___UUUUU_GGCAGCACAC__CUGAC______GUGACGGG___CAC___GGUC_A____CCCGAC_UUUUU___UUUUUUGAGUGAA______UUUGUGA_GACC__\
) } def
/len { sequence length } bind def

/coor [
[223.66754150 311.57656860]
[230.89997864 298.37890625]
[240.56840515 286.84600830]
[231.17076111 275.15481567]
[221.77310181 263.46362305]
[212.37545776 251.77241516]
[202.97779846 240.08120728]
[193.58015442 228.39001465]
[178.73727417 229.29928589]
[166.05508423 221.19830322]
[160.51002502 207.01712036]
[164.42376709 192.11782837]
[155.02610779 180.42663574]
[145.62846375 168.73542786]
[136.23081970 157.04423523]
[126.83316803 145.35302734]
[112.82884979 140.28071594]
[110.21345520 124.67718506]
[103.03624725 126.53411865]
[95.62507629 126.34650421]
[88.55101776 124.12879944]
[82.35913849 120.05188751]
[77.52655029 114.42990875]
[74.42562103 107.69605255]
[73.29528046 100.36918640]
[58.84203339 96.35626221]
[44.38878250 92.34333801]
[34.73105621 104.11823273]
[21.11609268 110.94118500]
[5.90276480 111.63006592]
[-8.27312469 106.06553650]
[-18.95551872 95.21166992]
[-24.29362488 80.94897461]
[-23.36258888 65.74854279]
[-16.32371521 52.24394989]
[-4.39653063 42.77493668]
[10.35250664 38.98207474]
[25.36803627 41.52249908]
[38.04852676 49.95606232]
[46.19701004 62.82160568]
[48.40170670 77.89009094]
[62.85495758 81.90301514]
[77.30820465 85.91593933]
[83.83744812 78.73852539]
[92.50000000 74.36743927]
[92.50000000 59.36743927]
[92.50000000 44.36743927]
[92.50000000 29.36743736]
[78.05097198 24.92705154]
[65.55363464 16.42363930]
[56.11925125 4.61331606]
[50.58670807 -9.45375156]
[49.44796371 -24.52672958]
[52.80427170 -39.26533890]
[60.35719299 -52.35903168]
[71.43511963 -62.64352798]
[85.05302429 -69.20433807]
[100.00000000 -71.45806885]
[114.94697571 -69.20433807]
[128.56488037 -62.64352798]
[139.64280701 -52.35903168]
[147.19572449 -39.26533890]
[150.55203247 -24.52672958]
[149.41328430 -9.45375156]
[143.88075256 4.61331606]
[134.44636536 16.42363930]
[121.94902802 24.92705154]
[107.50000000 29.36743736]
[107.50000000 44.36743927]
[107.50000000 59.36743927]
[107.50000000 74.36743927]
[125.19143677 91.13040161]
[121.90465546 115.27953339]
[136.58116150 121.18807983]
[138.52436829 135.95538330]
[147.92201233 147.64657593]
[157.31967163 159.33778381]
[166.71731567 171.02899170]
[176.11495972 182.72018433]
[191.50726318 182.10084534]
[204.16485596 190.56480408]
[209.35015869 204.69197083]
[205.27136230 218.99235535]
[214.66900635 230.68356323]
[224.06665039 242.37475586]
[233.46430969 254.06596375]
[242.86195374 265.75717163]
[252.25961304 277.44836426]
[265.60128784 270.48519897]
[280.04516602 266.25897217]
[295.03601074 264.93209839]
[309.99765015 266.55560303]
[324.35498047 271.06707764]
[337.55615234 278.29309082]
[349.09371948 287.95593262]
[358.52426147 299.68414307]
[365.48526001 313.02694702]
[369.70916748 327.47149658]
[371.03359985 342.46258545]
[369.40768433 357.42395020]
[364.89389038 371.78054810]
[357.66574097 384.98052979]
[348.00103760 396.51657104]
[336.27127075 405.94519043]
[322.92733765 412.90405273]
[308.48211670 417.12561035]
[293.49081421 418.44760132]
[278.52972412 416.81927490]
[264.17385864 412.30316162]
[250.97502136 405.07287598]
[239.44056702 395.40631104]
[230.01382446 383.67501831]
[223.05714417 370.32995605]
[218.83793640 355.88403320]
[217.51834106 340.89254761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[18 73]
[25 43]
[26 42]
[27 41]
[45 71]
[46 70]
[47 69]
[48 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
88 cmark
4 cmark
87 cmark
5 cmark
86 cmark
6 cmark
85 cmark
7 cmark
84 cmark
8 cmark
83 cmark
12 cmark
79 cmark
13 cmark
78 cmark
14 cmark
77 cmark
15 cmark
76 cmark
16 cmark
75 cmark
26 cmark
42 cmark

% End Annotations
showpage
end
%%EOF
