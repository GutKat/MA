%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Fri Nov  8 08:15:29 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUUUU___UUUU__GGCAGCGCGC__CUAA_______GUGACGGG___AGGU_GGUC_GC___CCCGAC__UUUUU__UUUUUUGAUUGACUAAG__UUUGUGA_GACC_U\
) } def
/len { sequence length } bind def

/coor [
[221.89620972 307.13906860]
[229.05081177 293.89904785]
[238.65118408 282.30941772]
[229.18486023 270.67376709]
[219.71853638 259.03808594]
[210.25221252 247.40242004]
[200.78590393 235.76675415]
[191.31958008 224.13108826]
[176.48231506 225.12774658]
[163.75263977 217.10154724]
[158.12419128 202.95326233]
[161.95014954 188.03118896]
[152.48382568 176.39552307]
[143.01750183 164.75985718]
[133.55119324 153.12419128]
[118.75454712 151.86122131]
[108.98860168 140.19584656]
[110.41365051 124.68433380]
[103.13657379 126.60681152]
[95.61193848 126.42925262]
[88.43363953 124.16567230]
[82.16825867 119.99473572]
[77.31031036 114.24564362]
[74.24322510 107.37216187]
[73.20907593 99.91680908]
[58.82194519 95.67295837]
[44.43480682 91.42910004]
[34.58976364 103.04783630]
[20.86728668 109.65188599]
[5.64487839 110.09706879]
[-8.44008636 104.30623627]
[-18.94730186 93.28270721]
[-24.05633163 78.93635559]
[-22.88200188 63.75278473]
[-15.62777519 50.36263657]
[-3.55048943 41.08583450]
[11.25739288 37.52964020]
[26.23031616 40.31018829]
[38.77413177 48.94573212]
[46.71554565 61.94010925]
[48.67866516 77.04196167]
[63.06579971 81.28582001]
[77.45293427 85.52967834]
[83.95803833 78.54269409]
[92.50000000 74.28015900]
[92.50000000 59.28015518]
[92.50000000 44.28015518]
[92.50000000 29.28015709]
[78.10682678 24.62271690]
[65.85852051 15.74385071]
[56.95505524 3.51342082]
[52.26868820 -10.87036133]
[52.25855255 -25.99831772]
[56.92563629 -40.38836670]
[65.81270599 -52.63071823]
[78.04910278 -61.52598953]
[92.43601990 -66.20271301]
[107.56398010 -66.20271301]
[121.95089722 -61.52598953]
[134.18728638 -52.63071823]
[143.07435608 -40.38836670]
[147.74143982 -25.99831772]
[147.73130798 -10.87036133]
[143.04495239 3.51342082]
[134.14147949 15.74385071]
[121.89317322 24.62271690]
[107.50000000 29.28015709]
[107.50000000 44.28015518]
[107.50000000 59.28015518]
[107.50000000 74.28015900]
[125.24415588 91.02822113]
[122.04931641 115.21800995]
[137.52632141 116.97868347]
[146.96076965 128.91375732]
[145.18685913 143.65786743]
[154.65318298 155.29353333]
[164.11949158 166.92921448]
[173.58581543 178.56488037]
[188.97419739 177.85493469]
[201.68141174 186.24421692]
[206.94979858 200.34060669]
[202.95524597 214.66476440]
[212.42156982 226.30043030]
[221.88789368 237.93609619]
[231.35420227 249.57177734]
[240.82052612 261.20742798]
[250.28684998 272.84310913]
[263.58731079 265.80151367]
[278.00604248 261.49032593]
[292.98883057 260.07522583]
[307.95974731 261.61059570]
[322.34338379 266.03747559]
[335.58688354 273.18563843]
[347.18115234 282.78036499]
[356.68057251 294.45288086]
[363.72000122 307.75448608]
[368.02886963 322.17388916]
[369.44155884 337.15692139]
[367.90374756 352.12759399]
[363.47454834 366.51052856]
[356.32424927 379.75283813]
[346.72763062 391.34558105]
[335.05358887 400.84310913]
[321.75085449 407.88037109]
[307.33071899 412.18692017]
[292.34750366 413.59716797]
[277.37704468 412.05694580]
[262.99484253 407.62542725]
[249.75367737 400.47296143]
[238.16250610 390.87448120]
[228.66687012 379.19891357]
[221.63174438 365.89501953]
[217.32754517 351.47421265]
[215.91970825 336.49072266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 87]
[4 86]
[5 85]
[6 84]
[7 83]
[8 82]
[12 78]
[13 77]
[14 76]
[15 75]
[18 72]
[25 43]
[26 42]
[27 41]
[45 70]
[46 69]
[47 68]
[48 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
87 cmark
4 cmark
86 cmark
5 cmark
85 cmark
6 cmark
84 cmark
7 cmark
83 cmark
8 cmark
82 cmark
12 cmark
78 cmark
13 cmark
77 cmark
14 cmark
76 cmark
15 cmark
75 cmark
26 cmark
42 cmark

% End Annotations
showpage
end
%%EOF
