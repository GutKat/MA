%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Tue Oct 29 09:59:14 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
RcMACAKAyC-AUGGAa-UGAUGYGGCAGCGCRCGASA---u-GYGACGGGgAARUGGUCGYACCCGACGCAYCAUCYAU--KARGMAAY-aYUUCGUGAGACCCYCMY\
) } def
/len { sequence length } bind def

/coor [
[172.56086731 399.98110962]
[166.50230408 388.51443481]
[162.50610352 376.17285156]
[160.69268799 363.32412720]
[161.11737061 350.35144043]
[163.76872253 337.64181519]
[168.56884766 325.57464600]
[175.37570190 314.51040649]
[183.98727417 304.77978516]
[194.14761353 296.67388916]
[178.83474731 288.23355103]
[179.49868774 269.90090942]
[172.12269592 256.83972168]
[164.74670410 243.77853394]
[157.37071228 230.71734619]
[149.99472046 217.65615845]
[145.57545471 215.50988770]
[142.53327942 210.48654175]
[142.59492493 203.63197327]
[135.97660828 190.17100525]
[123.41762543 182.16343689]
[124.27214050 166.36531067]
[117.65382385 152.90434265]
[111.03550720 139.44335938]
[104.41719055 125.98239136]
[96.51354980 126.12356567]
[88.92356110 123.91461182]
[82.33003998 119.55424500]
[77.32614136 113.43473816]
[74.36203003 106.10660553]
[73.70437622 98.22911835]
[75.41232300 90.51093292]
[63.53379059 81.35121918]
[51.65525818 72.19149780]
[37.15996170 77.47258759]
[22.11561203 74.05628967]
[11.32280922 63.03272247]
[8.22549629 47.91947937]
[13.81201363 33.53913116]
[26.29972458 24.48040009]
[41.70384598 23.63389397]
[55.10898209 31.26972771]
[62.23759460 44.95133591]
[60.81497574 60.31296539]
[72.69351196 69.47268677]
[84.57204437 78.63240051]
[90.08840942 75.57958984]
[96.17199707 73.92429352]
[98.30671692 59.07697296]
[100.44144440 44.22965240]
[102.57616425 29.38232994]
[89.87834930 20.91307259]
[82.12007904 7.76879644]
[80.84176636 -7.44069624]
[86.29721832 -21.69554901]
[97.40325165 -32.16545105]
[111.95475006 -36.77159119]
[127.06250763 -34.59942627]
[139.72686768 -26.08023071]
[147.43331909 -12.90550423]
[148.65173340 2.30890465]
[143.14018250 16.54216385]
[131.99301147 26.96824837]
[117.42348480 31.51705170]
[115.28876495 46.36437225]
[113.15403748 61.21169662]
[111.01931763 76.05901337]
[126.03071594 95.87713623]
[117.87816620 119.36407471]
[124.49648285 132.82504272]
[131.11479187 146.28602600]
[137.73310852 159.74699402]
[150.76548767 168.71739197]
[149.43757629 183.55268860]
[156.05589294 197.01367188]
[163.05590820 210.28015137]
[170.43190002 223.34135437]
[177.80789185 236.40254211]
[185.18388367 249.46372986]
[192.55989075 262.52493286]
[204.83979797 266.77816772]
[210.68650818 277.93136597]
[207.41410828 289.67385864]
[224.12490845 285.07611084]
[241.43722534 284.42398071]
[258.43246460 287.74880981]
[274.20959473 294.87094116]
[287.93301392 305.40951538]
[298.87664795 318.80288696]
[306.46246338 334.33840942]
[310.29098511 351.19042969]
[310.16229248 368.46420288]
[306.08648682 385.24334717]
[298.28305054 400.63845825]
[287.16885376 413.83428955]
[296.32858276 425.71282959]
[311.69192505 431.44863892]
[314.13900757 447.66418457]
[301.15249634 457.67828369]
[286.09179688 451.18930054]
[284.45004272 434.87252808]
[275.29031372 422.99401855]
[263.76651001 428.87234497]
[251.39964294 432.68109131]
[238.55828857 434.30548096]
[225.62536621 433.69577026]
[212.98675537 430.86898804]
[201.01976013 425.90820312]
[190.08184814 418.96026611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 83]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[19 75]
[20 74]
[22 72]
[23 71]
[24 70]
[25 69]
[32 46]
[33 45]
[34 44]
[48 67]
[49 66]
[50 65]
[51 64]
[95 102]
[96 101]
] def

init

% Start Annotations
12 80 0.48 0.6 colorpair
14 78 0.16 0.2 colorpair
23 71 0.48 1 colorpair
24 70 0.32 0.6 colorpair
25 69 0.0 0.6 colorpair
32 46 0.0 0.2 colorpair
33 45 0.16 1 colorpair
34 44 0.0 0.6 colorpair
48 67 0.16 0.2 colorpair
49 66 0.0 1 colorpair
50 65 0.0 1 colorpair
51 64 0.0 1 colorpair
95 102 0.32 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
10 83 36 gmark
10 cmark
83 cmark
12 80 1 gmark
12 cmark
80 cmark
13 79 5 gmark
13 cmark
79 cmark
14 78 2 gmark
78 cmark
15 77 6 gmark
15 cmark
77 cmark
16 76 11 gmark
16 cmark
76 cmark
19 75 13 gmark
19 cmark
75 cmark
20 74 9 gmark
20 cmark
74 cmark
22 72 8 gmark
22 cmark
72 cmark
23 cmark
71 cmark
24 70 1 gmark
24 cmark
70 cmark
25 69 1 gmark
32 46 2 gmark
33 cmark
45 cmark
34 44 1 gmark
48 67 2 gmark
48 cmark
95 102 1 gmark
95 cmark
102 cmark
96 101 10 gmark

% End Annotations
showpage
end
%%EOF
