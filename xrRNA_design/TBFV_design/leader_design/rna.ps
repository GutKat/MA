%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Thu Nov 14 11:06:15 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAAACCGUUCUGGACCCAGAGCUCCCCGCCCAGGGCCUAGGCAGCACGCGAAAUUAGGCGACGGGAGAGGGUCGGAUCCCGACUGGGCAGCUGGGCAAUUUGUAAUUUGUGAGACCC\
) } def
/len { sequence length } bind def

/coor [
[57.58958435 435.85311890]
[49.73825455 436.71765137]
[41.84112549 436.67251587]
[34.00321960 435.71865845]
[26.32873726 433.86911011]
[18.91965866 431.14880371]
[11.87440014 427.59426880]
[5.28650284 423.25308228]
[-0.75661266 418.18328857]
[-12.16270256 427.92498779]
[-23.56879234 437.66671753]
[-34.97488022 447.40844727]
[-46.38097000 457.15017700]
[-57.78705978 466.89187622]
[-62.74817657 482.52261353]
[-78.82121277 485.77676392]
[-89.47161102 473.30673218]
[-83.74314880 457.94064331]
[-67.52877808 455.48580933]
[-56.12269211 445.74407959]
[-44.71660233 436.00234985]
[-33.31051254 426.26062012]
[-21.90442276 416.51892090]
[-10.49833298 406.77719116]
[-20.76124954 383.20227051]
[-21.59983826 357.47827148]
[-12.87675476 333.23666382]
[4.19420528 313.90652466]
[27.21697426 302.22967529]
[52.94950485 299.87164307]
[56.06818008 285.19943237]
[59.18685532 270.52722168]
[62.30553055 255.85501099]
[65.42420197 241.18280029]
[68.54287720 226.51058960]
[62.19344330 210.20719910]
[74.47516632 196.56414795]
[77.20870209 181.81532288]
[79.94223022 167.06649780]
[82.67576599 152.31767273]
[85.40930176 137.56884766]
[88.14282990 122.82002258]
[81.84822083 118.21699524]
[77.22264862 111.93893433]
[74.69142151 104.56310272]
[74.48729706 96.76770020]
[76.62902832 89.26950073]
[80.91969299 82.75796509]
[86.96477509 77.83181000]
[83.46309662 63.24625778]
[79.96141052 48.66070938]
[65.57450867 42.84721756]
[57.38091660 29.66979027]
[58.53123474 14.19541168]
[68.58314514 2.37429786]
[83.67147827 -1.24809146]
[97.99447632 4.72112608]
[106.04463196 17.98666573]
[104.72651672 33.44765472]
[94.54695892 45.15902710]
[98.04864502 59.74457550]
[101.55032349 74.33012390]
[106.00343323 74.99390411]
[110.27252960 76.42414093]
[120.01425171 65.01805115]
[129.75596619 53.61196518]
[139.49769592 42.20587540]
[149.23941040 30.79978561]
[144.03694153 16.34883690]
[146.77273560 1.23556530]
[156.71089172 -10.47463703]
[171.17807007 -15.63178349]
[186.28269958 -12.84862804]
[197.96168518 -2.87382531]
[203.07345581 11.60945225]
[200.24298096 26.70527649]
[190.23161316 38.35294724]
[175.73237610 43.41929626]
[160.64550781 40.54150391]
[150.90377808 51.94759369]
[141.16206360 63.35368347]
[131.42034912 74.75977325]
[121.67861938 86.16586304]
[123.21146393 111.07130432]
[102.89165497 125.55355835]
[100.15811920 140.30238342]
[97.42459106 155.05120850]
[94.69105530 169.80003357]
[91.95752716 184.54885864]
[89.22399139 199.29766846]
[95.90019989 210.42756653]
[93.23716736 222.71858215]
[83.21509552 229.62925720]
[80.09642029 244.30148315]
[76.97774506 258.97369385]
[73.85906982 273.64590454]
[70.74039459 288.31811523]
[67.62171936 302.99032593]
[74.99542999 305.91857910]
[81.98162842 309.67556763]
[88.48757935 314.21102905]
[94.42695618 319.46435547]
[99.72099304 325.36541748]
[104.29954529 331.83551025]
[108.10201263 338.78839111]
[111.07813263 346.13137817]
[113.18864441 353.76672363]
[114.40582275 361.59277344]
[114.71382904 369.50540161]
[114.10890961 377.39932251]
[112.59947205 385.16964722]
[110.20592499 392.71304321]
[106.96043396 399.92932129]
[102.90649414 406.72265625]
[98.09831238 413.00283813]
[92.60012054 418.68661499]
[86.48529053 423.69863892]
[79.83536530 427.97247314]
[72.73897552 431.45159912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[49 62]
[50 61]
[51 60]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
