%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Mon Nov  4 09:52:53 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCCAGGGCCUGGGCAGCACGCGAAAUUAGGCGACGGGAGAGGGUCGGAUCCCGACCGGGCAGCUGGGCAAUGAAUGUGAGACCC\
) } def
/len { sequence length } bind def

/coor [
[178.69665527 307.26263428]
[185.59004211 293.81002808]
[196.14360046 282.98809814]
[188.95486450 269.82293701]
[181.76612854 256.65774536]
[174.57739258 243.49255371]
[167.38865662 230.32737732]
[160.19992065 217.16218567]
[144.78091431 208.98956299]
[145.08464050 190.68420410]
[137.43058777 177.78398132]
[129.77653503 164.88377380]
[122.12248993 151.98356628]
[114.46843719 139.08334351]
[106.81438446 126.18313599]
[99.12532043 127.04121399]
[91.50777435 125.68801880]
[84.58467865 122.23421478]
[78.92215729 116.96221924]
[74.98325348 110.30315399]
[73.09008026 102.80155182]
[73.39744568 95.07086182]
[59.98406601 88.35660553]
[46.57068634 81.64234161]
[32.85803223 88.90476227]
[17.50029564 86.68675995]
[6.40283823 75.84120941]
[3.83286023 60.53843307]
[10.77857018 46.66267395]
[24.56920052 39.54943848]
[39.90197372 41.93391037]
[50.88112259 52.89921188]
[53.28494644 68.22896576]
[66.69832611 74.94322205]
[80.11170197 81.65747833]
[87.88955688 75.80641937]
[97.23467255 73.08633423]
[99.89796448 58.32466888]
[102.56126404 43.56299973]
[105.22456360 28.80133247]
[107.88786316 14.03966427]
[96.10986328 4.18196154]
[90.85374451 -10.24955845]
[93.53337097 -25.37289047]
[103.42794037 -37.11993408]
[117.87586975 -42.33079147]
[132.99072266 -39.60377121]
[144.70669556 -29.67242622]
[149.87223816 -15.20823956]
[147.09785461 -0.10200348]
[137.12983704 11.58277988]
[122.64952850 16.70296097]
[119.98622894 31.46463013]
[117.32293701 46.22629929]
[114.65963745 60.98796463]
[111.99633789 75.74963379]
[126.62548065 95.19623566]
[119.71459961 118.52908325]
[127.36865234 131.42929077]
[135.02270508 144.32951355]
[142.67675781 157.22972107]
[150.33079529 170.12994385]
[157.98484802 183.03015137]
[170.39802551 187.04518127]
[176.46844482 198.13488770]
[173.36511230 209.97344971]
[180.55384827 223.13864136]
[187.74258423 236.30381775]
[194.93132019 249.46900940]
[202.12005615 262.63418579]
[209.30879211 275.79937744]
[224.11843872 272.77191162]
[239.16233826 274.24584961]
[253.10279846 280.09011841]
[264.70022583 289.78500366]
[272.92337036 302.46850586]
[277.04107666 317.01278687]
[276.68719482 332.12457275]
[271.89315796 346.46014404]
[263.08526611 358.74478149]
[251.04672241 367.88616943]
[236.84797668 373.07144165]
[221.75155640 373.83950806]
[207.09986877 370.12213135]
[194.19567871 362.24978638]
[184.18646240 350.92254639]
[177.96220398 337.14755249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[22 35]
[23 34]
[24 33]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
