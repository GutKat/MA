%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Thu Jul 25 13:16:24 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAAAAAAGACACCUACCGGUGUCAACCUCAGGCCAGAAAUGCCACCGGAUAAAGGUAGACGGUGCCGCCUGCAACCUUU\
) } def
/len { sequence length } bind def

/coor [
[27.68638039 234.83897400]
[18.21673393 237.76246643]
[8.38443184 238.96826172]
[-1.50166392 238.42018127]
[-11.13129711 236.13705444]
[-20.20255280 232.19216919]
[-28.43131828 226.71087646]
[-35.56019211 219.86663818]
[-41.36652756 211.87550354]
[-45.66938782 202.98930359]
[-60.27481842 206.40710449]
[-74.88024902 209.82490540]
[-89.48567963 213.24270630]
[-104.09111023 216.66050720]
[-118.69654083 220.07830811]
[-130.28002930 231.68670654]
[-146.05303955 227.19845581]
[-149.78964233 211.23068237]
[-137.64595032 200.20965576]
[-122.11434937 205.47288513]
[-107.50891876 202.05508423]
[-92.90348053 198.63726807]
[-78.29804993 195.21946716]
[-63.69261932 191.80166626]
[-49.08718872 188.38386536]
[-46.91377640 166.56948853]
[-36.48255539 147.25044250]
[-19.38397980 133.42576599]
[1.75426459 127.25267029]
[23.67105865 129.70996094]
[42.97496033 140.44296265]
[54.17325974 130.46307373]
[65.37155914 120.48319244]
[76.56985474 110.50331116]
[87.76815796 100.52342224]
[73.00747681 97.85464478]
[63.17222214 86.52910614]
[62.59861755 71.54007721]
[71.53955078 59.49600983]
[86.05310059 55.70695496]
[99.74044037 61.84346008]
[106.56702423 75.20001984]
[103.52423096 89.88604736]
[112.45828247 76.82873535]
[127.29721832 78.11529541]
[140.73970032 71.45950317]
[154.18218994 64.80370331]
[167.62466431 58.14790344]
[181.06715393 51.49210739]
[186.21014404 36.78879547]
[199.93754578 30.23036385]
[213.92321777 35.22403336]
[227.36569214 28.56823540]
[235.99946594 14.62585640]
[252.38023376 15.40211773]
[259.65686035 30.09846878]
[250.34378052 43.59656525]
[234.02149963 42.01071930]
[220.57901001 48.66651535]
[216.07197571 62.81650543]
[202.53419495 69.75792694]
[187.72294617 64.93459320]
[174.28047180 71.59038544]
[160.83798218 78.24618530]
[147.39549255 84.90198517]
[133.95301819 91.55777740]
[125.98046875 104.13902283]
[110.18003082 103.32853699]
[97.74803925 111.72171783]
[86.54974365 121.70160675]
[75.35144043 131.68148804]
[64.15314484 141.66137695]
[52.95484543 151.64126587]
[57.75283813 160.36659241]
[60.93415070 169.79728699]
[62.40048981 179.63677979]
[62.10744858 189.57591248]
[60.06589127 199.30273438]
[56.34151840 208.51225281]
[51.05278397 216.91595459]
[44.36711121 224.25091553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[43 68]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
